# Construction du modèle de régression linéaire
model <- lm(Quantite ~ ., data = train_data)
# Obtenir les prédictions du modèle sur l'ensemble de test
predictions <- predict(model, newdata = test_data)
library(randomForest)
# Diviser les données en ensembles d'entraînement et de test
set.seed(123) # Pour reproductibilité
train_indices <- sample(1:nrow(datashopmeaway), 0.8 * nrow(datashopmeaway))
train_data <- datashopmeaway[train_indices, ]
test_data <- datashopmeaway[-train_indices, ]
# Construction du modèle de forêt aléatoire
model <- randomForest(Quantite ~ Prix_Produit + id_Produit + Montant + Montant_Article_Commandé +
id_StatutProduit + Bank_Charge + Largeur + Longueur + Profondeur +
FraisExpe + Paiment + Mode_Transport +
Pays + MethodeTransport + Semaine + Couleur + Taille + DaviseFraisE +
Nom_Produit + Identifiant_Utilisateur, data = train_data)
# Faire la prédiction sur l'ensemble de test
predictions <- predict(model, newdata = test_data)
# Afficher les prédictions
print(predictions)
rmse <- sqrt(mean((predictions - test_data$Quantite)^2))
print(paste("RMSE:", rmse))
# Charger la bibliothèque ggplot2
library(ggplot2)
# Créer un dataframe pour les prédictions et les valeurs réelles
results <- data.frame(Reel = test_data$Quantite, Prediction = predictions)
# Créer le graphique de dispersion avec la droite de régression
ggplot(results, aes(x = Reel, y = Prediction)) +
geom_point(color = "blue", alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Comparaison des prédictions aux valeurs réelles",
x = "Valeurs réelles",
y = "Prédictions") +
theme_minimal()
# Charger les bibliothèques nécessaires
library(dplyr)
library(caret)
library(neuralnet)
# Sélectionner les variables pour le modèle
selected_variables <- datashopmeaway %>%
select(Quantite, Prix_Produit, id_Produit, Montant, Montant_Article_Commandé, id_StatutProduit, Bank_Charge,
Largeur, Longueur, Profondeur, FraisExpe, Paiment, Mode_Transport, Pays, MethodeTransport,
Semaine, Couleur, Taille, DaviseFraisE, Nom_Produit, Identifiant_Utilisateur)
# Diviser les données en ensembles d'entraînement et de test
set.seed(123)
train_indices <- sample(1:nrow(selected_variables), 0.8 * nrow(selected_variables))
train_data <- selected_variables[train_indices, ]
test_data <- selected_variables[-train_indices, ]
# Construction du modèle de réseau de neurones
formula <- as.formula("Quantite ~ .")
model <- neuralnet(formula, data = train_data, hidden = c(10, 5))
library(dplyr)
library(ggplot2)
library(forecast)
# Créer un dataframe pour les séries temporelles
donnees_series_temporelles <- datashopmeaway %>%
select(DateCreation, Montant) %>%
arrange(DateCreation)
# Convertir la colonne DateCreation en format de date
donnees_series_temporelles$DateCreation <- as.Date(donnees_series_temporelles$DateCreation)
# Créer un objet de série temporelle avec DateCreation comme index
serie_temporelle <- ts(donnees_series_temporelles$Montant, frequency = 7)
# Appliquer le modèle ARIMA
modele_arima <- auto.arima(serie_temporelle)
# Prédire les valeurs futures pour les 30 prochains jours
donnees_prevues <- forecast(modele_arima, h = 30)
# Afficher le graphique des prédictions
plot(donnees_prevues, main = "Prédictions de Montant avec ARIMA",
xlab = "Date", ylab = "Montant", col = "blue", lwd = 2)
lines(serie_temporelle, col = "red")
legend("topleft", legend = c("Prédictions", "Données réelles"), col = c("blue", "red"), lwd = c(2, 2))
print(donnees_prevues)
library(dplyr)
# Sélectionner les variables pour le modèle de régression linéaire
selected_variables <- datashopmeaway %>%
select(Montant, Prix_Produit, id_Produit, Quantite, Montant_Article_Commandé, id_StatutProduit, Bank_Charge,
Largeur, Longueur, Profondeur, FraisExpe, Paiment, Mode_Transport, Pays, MethodeTransport,
Semaine, Couleur, Taille, DaviseFraisE, Nom_Produit, Identifiant_Utilisateur)
# Diviser les données en ensembles d'entraînement et de test
set.seed(123)
train_indices <- sample(1:nrow(selected_variables), 0.8 * nrow(selected_variables))
train_data <- selected_variables[train_indices, ]
test_data <- selected_variables[-train_indices, ]
# Construction du modèle de régression linéaire
model <- lm(Montant ~ ., data = train_data)
# Obtenir les prédictions du modèle sur l'ensemble de test
predictions <- predict(model, newdata = test_data)
# Charger la bibliothèque randomForest
library(randomForest)
# Sélectionner les variables pour le modèle Random Forest
selected_variables <- datashopmeaway %>%
select(Montant, Prix_Produit, id_Produit, Quantite, Montant_Article_Commandé, id_StatutProduit, Bank_Charge,
Largeur, Longueur, Profondeur, FraisExpe, Paiment, Mode_Transport, Pays, MethodeTransport,
Semaine, Couleur, Taille, DaviseFraisE, Nom_Produit, Identifiant_Utilisateur)
# Diviser les données en ensembles d'entraînement et de test
set.seed(123)
train_indices <- sample(1:nrow(selected_variables), 0.8 * nrow(selected_variables))
train_data <- selected_variables[train_indices, ]
test_data <- selected_variables[-train_indices, ]
# Construction du modèle Random Forest
model <- randomForest(Montant ~ ., data = train_data)
# Obtenir les prédictions du modèle sur l'ensemble de test
predictions <- predict(model, newdata = test_data)
# Afficher les prédictions
print(predictions)
# Calculer le RMSE
rmse <- sqrt(mean((predictions - test_data$Montant)^2))
print(paste("RMSE:", rmse))
# Charger les bibliothèques nécessaires
library(forecast)
library(dplyr)
# Créer un dataframe pour les séries temporelles du montant
donnees_series_temporelles_montant <- datashopmeaway %>%
select(DateCreation, Montant) %>%
arrange(DateCreation)
# Convertir la colonne DateCreation en format de date
donnees_series_temporelles_montant$DateCreation <- as.Date(donnees_series_temporelles_montant$DateCreation)
# Créer un objet de série temporelle avec DateCreation comme index pour le montant
serie_temporelle_montant <- ts(donnees_series_temporelles_montant$Montant, frequency = 7)
# Appliquer le modèle ARIMA pour le montant
modele_arima_montant <- auto.arima(serie_temporelle_montant)
# Prédire les valeurs futures pour le montant sur les 238 prochains jours
donnees_prevues_montant <- forecast(modele_arima_montant, h = 238)
# Créer un dataframe avec les dates futures et les prédictions pour le montant
donnees_prevues_df_montant <- data.frame(DateCreation = seq(from = max(donnees_series_temporelles_montant$DateCreation) + 1, by = "1 day", length.out = 238),
Montant = donnees_prevues_montant$mean)
# Afficher le graphique des prédictions pour le montant
plot(donnees_series_temporelles_montant, main = "Prédictions de Montant avec ARIMA",
xlab = "Date", ylab = "Montant", col = "red", type = "l")
lines(donnees_prevues_df_montant$DateCreation, donnees_prevues_df_montant$Montant, col = "blue", lwd = 2)
legend("topleft", legend = c("Données réelles", "Prédictions Montant"), col = c("red", "blue"), lwd = c(1, 2))
# Préparation des données pour la régression linéaire de la quantité
donnees_regression_quantite <- datashopmeaway %>%
select(Quantite, Prix_Produit, id_Produit, Montant, Montant_Article_Commandé, id_StatutProduit, Bank_Charge,
Largeur, Longueur, Profondeur, FraisExpe, Paiment, Mode_Transport, Pays, MethodeTransport,
Semaine, Couleur, Taille, DaviseFraisE, Nom_Produit, Identifiant_Utilisateur)
# Construction du modèle de régression linéaire pour la quantité
model_regression_quantite <- lm(Quantite ~ ., data = donnees_regression_quantite)
# Obtenir les prédictions du modèle sur l'ensemble des données pour la quantité
predictions_regression_quantite <- predict(model_regression_quantite)
# Obtenir les identifiants de produits correspondant aux prédictions
identifiants_produits <- datashopmeaway$id_Produit
DeviseFraisExpe  <- datashopmeaway$DaviseFraisE
# Créer un dataframe avec les dates futures, les prédictions pour le montant, les prédictions pour la quantité et les identifiants de produits
donnees_prevues_df <- data.frame(DateCreation = seq(from = max(donnees_series_temporelles_montant$DateCreation) + 1, by = "1 day", length.out = 238),
id_Produit = identifiants_produits,
Montant = donnees_prevues_montant$mean,
DaviseFraisE = DeviseFraisExpe,
Quantite = predictions_regression_quantite)
# Afficher les prédictions
print(donnees_prevues_df)
# Calculer l'erreur quadratique moyenne (RMSE) pour la quantité
rmse_quantite <- sqrt(mean((test_data_regression_quantite$Quantite - predictions_regression_quantite)^2))
###
library(DBI)
library(RPostgreSQL)
# Informations de connexion
db_host <- "104.248.98.36"
db_port <- 5432
db_name <- "shopmeaway_development"
db_user <- "deploy"
db_password <- "~/.ssh/sma_uat.pem"
ssh_user <- "deploy"
ssh_key <- "~/.ssh/sma_uat.pem"
ssh_command <- sprintf("ssh -i %s -L 5432:localhost:5432 %s@%s", ssh_key, ssh_user, db_host)
system(ssh_command)
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE,
cache = TRUE,
dev = "png",
dpi = 300,
fig.align = "center",
fig.keep = "all",
error = TRUE
)
shiny::runGadget(sparklyr::connection_spark_shinyapp(), viewer = .rs.embeddedViewer)
library(DBI)
con <- dbConnect(odbc::odbc(), .connection_string = "Driver={SQL Server};104.248.98.36", timeout = 10)
library(DBI)
con <- dbConnect(odbc::odbc(), .connection_string = "Driver={SQL Server};104.248.98.36:5432:deploy:~/.ssh/sma-uat.pem", timeout = 10)
library(DBI)
con <- dbConnect(odbc::odbc(), .connection_string = "Driver={SQL Server};104.248.98.36:5432:deploy:~/.ssh/sma-uat.pem", timeout = 10)
library(DBI)
con <- dbConnect(odbc::odbc(), .connection_string = "Driver={SQL Server};104.248.98.36:5432:deploy:~/.ssh/sma-uat.pem", timeout = 10)
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE,
cache = TRUE,
dev = "png",
dpi = 300,
fig.align = "center",
fig.keep = "all",
error = TRUE
)
library(readr)
library(data.table)
library(datasets)
library(dplyr)
library(lubridate)
library(ggplot2)
library(ggthemes)
library(plotly)
library(Amelia)
library(caTools)
library(class)
library(scales)
library(readr)
library(dplyr)
library(randomForest)
library(caret)
library(ggplot2)
library(reshape2)
library(latexpdf)
library(RColorBrewer)
if (!requireNamespace("dplyr", quietly = TRUE)) {
install.packages("dplyr")
}
if (!requireNamespace("randomForest", quietly = TRUE)) {
install.packages("randomForest")
}
if (!requireNamespace("caret", quietly = TRUE)) {
install.packages("caret")
}
datashopmeaway <- read_csv("datashopmeaway.csv")
View(datashopmeaway)
head(datashopmeaway)
options(scipen=999)
set.seed(321)
datashopmeaway <- read_csv("datashopmeaway.csv")
View(datashopmeaway)
datashopmeaway <- datashopmeaway[ ,-c(10,11,12,13,14,15,16,17,18,20,24,25,26,34,36,37,38,39,42,47,48,49)]
names(datashopmeaway)
colnames(datashopmeaway) <- c( "Identifiant","Num_Commande","Montant","DateCreation","Date_Mis_À_Jour",
"Identifiant_Utilisateur","Paiment","Id_Adresse","typeCommande","Identifiant-2","Date_Creation-2","Prenom","Nom","Identifiant-3","id_Produit","id_StatutProduit","idOrder","Quantite","Date_Creation-3","Montant_Article_Commandé","Bank_Charge","Mode_Transport","Pays","MethodeTransport","Largeur","Longueur","Profondeur","Identifiant-4","Nom1","Identifiant-5",
"Nom_Produit","Prix_Produit","Devise","Description","Couleur","Taille","Date_Creation-4","idcat2","FraisExpe",
"DaviseFraisE","colorsNull","Mode_Transport-2","Ville","oder_id2")
names(datashopmeaway)
for (Montant in datashopmeaway) {
datashopmeaway$Montant  <- as.numeric(datashopmeaway$Montant )
}
for (Montant_Article_Commandé in datashopmeaway) {
datashopmeaway$Montant_Article_Commandé  <- as.numeric(datashopmeaway$Montant_Article_Commandé)
}
for (`Identifiant-3` in datashopmeaway) {
datashopmeaway$`Identifiant-3` <- as.numeric(datashopmeaway$`Identifiant-3`  )
}
for (Largeur  in datashopmeaway) {
datashopmeaway$Largeur  <- as.numeric(datashopmeaway$Largeur )
}
for (oder_id2    in datashopmeaway) {
datashopmeaway$oder_id2    <- as.numeric(datashopmeaway$oder_id2   )
}
for ( FraisExpe    in datashopmeaway) {
datashopmeaway$FraisExpe      <- as.numeric(datashopmeaway$FraisExpe     )
}
for ( Prix_Produit     in datashopmeaway) {
datashopmeaway$Prix_Produit      <- as.numeric(datashopmeaway$Prix_Produit      )
}
for ( `Identifiant-5` in datashopmeaway) {
datashopmeaway$`Identifiant-5` <- as.numeric(datashopmeaway$`Identifiant-5` )
}
for ( Profondeur    in datashopmeaway) {
datashopmeaway$Profondeur     <- as.numeric(datashopmeaway$Profondeur     )
}
for ( Longueur      in datashopmeaway) {
datashopmeaway$Longueur       <- as.numeric(datashopmeaway$Longueur       )
}
for ( Quantite in datashopmeaway) {
datashopmeaway$Quantite <- as.numeric(datashopmeaway$Quantite)
}
for ( Bank_Charge     in datashopmeaway) {
datashopmeaway$Bank_Charge      <- as.numeric(datashopmeaway$Bank_Charge)
}
for ( idOrder in datashopmeaway) {
datashopmeaway$idOrder      <- as.numeric(datashopmeaway$idOrder)
}
for ( Bank_Charge     in datashopmeaway) {
datashopmeaway$Bank_Charge      <- as.numeric(datashopmeaway$Bank_Charge)
}
for ( id_Produit in datashopmeaway) {
datashopmeaway$id_Produit <- as.numeric(datashopmeaway$id_Produit)
}
for ( id_StatutProduit in datashopmeaway) {
datashopmeaway$id_StatutProduit <- as.numeric(datashopmeaway$id_StatutProduit)
}
for (Date_Mis_À_Jour in datashopmeaway) {
datashopmeaway$Date_Mis_À_Jour <- as.Date(datashopmeaway$Date_Mis_À_Jour)
}
for (DateCreation   in datashopmeaway) {
datashopmeaway$DateCreation  <- as.Date(datashopmeaway$DateCreation)
}
for (`Date_Creation-2`   in datashopmeaway) {
datashopmeaway$`Date_Creation-2`  <- as.Date(datashopmeaway$`Date_Creation-2`)
}
for (`Date_Creation-3`   in datashopmeaway) {
datashopmeaway$`Date_Creation-3`  <- as.Date(datashopmeaway$`Date_Creation-3`)
}
for (`Date_Creation-4` in datashopmeaway) {
datashopmeaway$`Date_Creation-4`  <- as.Date(datashopmeaway$`Date_Creation-4`)
}
for (Montant in datashopmeaway) {
mean_value <- mean(datashopmeaway$Montant, na.rm = TRUE)
datashopmeaway$Montant[is.na(datashopmeaway$Montant)] <- mean_value
}
for (`Identifiant-3` in datashopmeaway) {
mean_value <- mean(datashopmeaway$Montant, na.rm = TRUE)
datashopmeaway$`Identifiant-3`[is.na(datashopmeaway$`Identifiant-3`)] <- mean_value
}
for (id_Produit in datashopmeaway) {
mean_value <- mean(datashopmeaway$Montant, na.rm = TRUE)
datashopmeaway$id_Produit[is.na(datashopmeaway$id_Produit)] <- mean_value
}
for (id_StatutProduit in datashopmeaway) {
mean_value <- mean(datashopmeaway$Montant, na.rm = TRUE)
datashopmeaway$id_StatutProduit[is.na(datashopmeaway$id_StatutProduit)] <- mean_value
}
for (idOrder in datashopmeaway) {
mean_value <- mean(datashopmeaway$idOrder, na.rm = TRUE)
datashopmeaway$idOrder[is.na(datashopmeaway$idOrder)] <- mean_value
}
for (Quantite in datashopmeaway) {
mean_value <- mean(datashopmeaway$Quantite, na.rm = TRUE)
datashopmeaway$Quantite[is.na(datashopmeaway$Quantite)] <- mean_value
}
for (Montant_Article_Commandé in datashopmeaway) {
mean_value <- mean(datashopmeaway$Montant_Article_Commandé, na.rm = TRUE)
datashopmeaway$Montant_Article_Commandé[is.na(datashopmeaway$Montant_Article_Commandé)] <- mean_value
}
for (Bank_Charge in datashopmeaway) {
mean_value <- mean(datashopmeaway$Bank_Charge, na.rm = TRUE)
datashopmeaway$Bank_Charge[is.na(datashopmeaway$Bank_Charge)] <- mean_value
}
for (Largeur in datashopmeaway) {
mean_value <- mean(datashopmeaway$Largeur, na.rm = TRUE)
datashopmeaway$Largeur[is.na(datashopmeaway$Largeur)] <- mean_value
}
for (Longueur in datashopmeaway) {
mean_value <- mean(datashopmeaway$Longueur, na.rm = TRUE)
datashopmeaway$Longueur[is.na(datashopmeaway$Longueur)] <- mean_value
}
for (Profondeur in datashopmeaway) {
mean_value <- mean(datashopmeaway$Profondeur, na.rm = TRUE)
datashopmeaway$Profondeur[is.na(datashopmeaway$Profondeur)] <- mean_value
}
for (Prix_Produit in datashopmeaway) {
mean_value <- mean(datashopmeaway$Prix_Produit, na.rm = TRUE)
datashopmeaway$Prix_Produit[is.na(datashopmeaway$Prix_Produit)] <- mean_value
}
for (`Identifiant-5` in datashopmeaway) {
mean_value <- mean(datashopmeaway$`Identifiant-5`, na.rm = TRUE)
datashopmeaway$`Identifiant-5`[is.na(datashopmeaway$`Identifiant-5`)] <- mean_value
}
for (FraisExpe in datashopmeaway) {
mean_value <- mean(datashopmeaway$FraisExpe, na.rm = TRUE)
datashopmeaway$FraisExpe[is.na(datashopmeaway$FraisExpe)] <- mean_value
}
for (oder_id2 in datashopmeaway) {
mean_value <- mean(datashopmeaway$oder_id2, na.rm = TRUE)
datashopmeaway$oder_id2[is.na(datashopmeaway$oder_id2)] <- mean_value
}
for (Paiment in datashopmeaway) {
datashopmeaway$Paiment[is.na(datashopmeaway$Paiment)] <- "Espece"
}
for (Mode_Transport in datashopmeaway) {
datashopmeaway$Mode_Transport[is.na(datashopmeaway$Mode_Transport)] <- "No_groupage"
}
for (Couleur in datashopmeaway) {
datashopmeaway$Couleur[is.na(datashopmeaway$Couleur)] <-  "WHITE"
}
for (Taille in datashopmeaway) {
datashopmeaway$Taille[is.na(datashopmeaway$Taille)] <- "XL"
}
for (Description in datashopmeaway) {
datashopmeaway$Description[is.na(datashopmeaway$Description)] <- "Pas_Description"
}
for (`Date_Creation-3` in datashopmeaway) {
median_value <- median(datashopmeaway$`Date_Creation-3`, na.rm = TRUE)
datashopmeaway$`Date_Creation-3`[is.na(datashopmeaway$`Date_Creation-3`)] <- median_value
}
for (`Date_Creation-4` in datashopmeaway) {
median_value <- median(datashopmeaway$`Date_Creation-4`, na.rm = TRUE)
datashopmeaway$`Date_Creation-4`[is.na(datashopmeaway$`Date_Creation-4`)] <- median_value
}
datashopmeaway <- as.data.frame(datashopmeaway)
str(datashopmeaway)
#Créer la nouvelle colonne "Annee" avec seulement les années
datashopmeaway$Annee <- format(datashopmeaway$DateCreation, "%Y")
# Créer la nouvelle colonne "Mois" avec seulement les mois (format "MM")
datashopmeaway$Mois <- format(datashopmeaway$DateCreation, "%m")
# Créer la nouvelle colonne "Semaine" avec seulement les numéros de semaine (format "WW")
datashopmeaway$Semaine <- format(datashopmeaway$DateCreation, "%U")
# Créer la nouvelle colonne "Jour" avec seulement les jours (format "DD")
datashopmeaway$Jour <- format(datashopmeaway$DateCreation, "%d")
# Créer la nouvelle colonne "Jour_de_la_semaine" avec le nom du jour de la semaine
datashopmeaway$Jour_de_la_semaine <- weekdays(datashopmeaway$DateCreation)
# Afficher la structure de la colonne
str(datashopmeaway$Annee)
str(datashopmeaway$Mois)
str(datashopmeaway$Semaine)
str(datashopmeaway$Jours)
str(datashopmeaway$Jour_de_la_semaine)
datashopmeaway$Mois<- month(datashopmeaway$DateCreation)
datashopmeaway$Jours <- day(datashopmeaway$DateCreation)
datashopmeaway$Semaine <- weekdays(datashopmeaway$DateCreation)
## Verifions
colSums(is.na(datashopmeaway))
is.null(datashopmeaway)
variables_quantitatives <-datashopmeaway[sapply(datashopmeaway, class) == "numeric"]
variables_quantitatives <- as.data.frame(variables_quantitatives)
## Maitenant Observons la corelation entre les variables Numeric
cor(variables_quantitatives)
# Calculer la variance de chaque variable dans variables_quantitatives
variances <- apply(variables_quantitatives, 2, var)
# Filtrer les variables qui ont une variance non nulle (par exemple, supérieure à une petite tolérance comme 1e-10)
variables_quantitatives_filtrees <- variables_quantitatives[, variances > 1e-10]
### Calculer la Correlation
# Calculer la matrice de corrélation pour les variables quantitatives filtrées
matrice_correlation <- cor(variables_quantitatives_filtrees)
# les packages
library(ggplot2)
library(reshape2)
# Convertir la matrice en format "long" avec la fonction melt()
melted_corr <- melt(matrice_correlation)
# Visualiser la matrice de corrélation
# Créer la heatmap avec ggplot
ggplot(data = melted_corr, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "red", high = "white") +
geom_text(aes(label = round(value, 1)), size = 2) +
labs(title = "Matrice de corrélation", x = "Colonnes numériques", y = "Colonnes numériques", fill = "Intervalle de coefficient") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5))
##Le Montant et le Prix_Produit en fonction des Annee
qplot(data = datashopmeaway, y = Montant, x =Prix_Produit, geom = "line") +
facet_wrap(~Annee)
###  le Montant et Bank_charge en fontion des Annee
qplot(data = datashopmeaway, y = Montant, x = Bank_Charge, geom = "line") +
facet_wrap(~ Annee)
##  Le montant et les FraiSExpe en fonction des Annee
qplot(data = datashopmeaway, y = Montant, x =FraisExpe, geom = "line") +
facet_wrap(~ Annee)
#Le montant et les FraiSExpe en fonction des Semmaines
qplot(data = datashopmeaway, y = Montant, x =FraisExpe, geom = "line") +
facet_wrap(~ Semaine)
##  le Montant, produit par annee en fontion des villes
# Montant
qplot(Annee, Montant, data = datashopmeaway) +
facet_wrap(~ Ville)
##
qplot(Annee, Montant, data = datashopmeaway) +
facet_wrap(~ Pays)
# Regrouper les données par année, identifiant de produit et nom de produit, puis calculer la somme des quantités vendues
# Ventes de produits par année
ventes_par_annee <- datashopmeaway %>%
group_by(Annee, id_Produit, Nom_Produit) %>%
summarise(total_quantite_vendue = sum(Quantite)) %>%
ungroup()
# Identifier le produit le plus vendu par année
produit_plus_vendu_par_annee <- ventes_par_annee %>%
group_by(Annee) %>%
top_n(1, total_quantite_vendue) %>%
ungroup()
# Visualisation du résultat
ggplot(data = produit_plus_vendu_par_annee, aes(x = as.factor(Annee), y = total_quantite_vendue, fill = Nom_Produit)) +
geom_bar(stat = "identity") +
labs(title = "Produit le plus vendu par année", x = "Année", y = "Quantité totale vendue", fill = "Nom du produit") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Regrouper les données par année, semaine, identifiant de produit et nom de produit, puis calculer la somme des quantités vendues
ventes_produits_par_semaine <- datashopmeaway %>%
mutate(Semaine = week(DateCreation)) %>%
group_by(Annee, Semaine, id_Produit, Nom_Produit, .groups = "drop") %>%
summarise(total_quantite_vendue = sum(Quantite), .groups = "drop") %>%
ungroup()
# Identifier le produit le plus vendu par semaine
produit_plus_vendu_par_semaine <- ventes_produits_par_semaine %>%
group_by(Annee, Semaine, .groups = "drop") %>%
top_n(1, total_quantite_vendue) %>%
ungroup()
# Sélectionner les 70 premières lignes du jeu de données
top_70_produits <- head(ventes_produits_par_semaine, 70)
# Réduire la taille du graphique
options(repr.plot.width = 12, repr.plot.height = 8)
# Extraire les 40 premières lettres du nom du produit
top_70_produits$Nom_Produit <- substr(top_70_produits$Nom_Produit, 1, 40)
# Créer une palette de couleurs discrète pour les semaines
num_semaines <- length(unique(top_70_produits$Semaine))
result <- dbGetQuery(db_connection, query)
install.packages("DBI")
install.packages("DBI")
# Conne dataset
library(DBI)
library(RPostgreSQL)
setwd("C:/Users/aldio/OneDrive/Bureau/PROJET VALORISATION DES DONNES/DonnéesCode/DonnéesEcommerce")
setwd("C:/Users/aldio/OneDrive/Bureau/projetEcommerce/DonnéesCode")
library(readr)
produits <- read_delim("DonnéesEcommerce/produits.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
View(produits)
# Utilisation de gsub() pour supprimer le symbole $
prix <- gsub("\\$", "", produits$prix)
# Afficher le résultat
print(prix)
View(prduits)
View(produits)
# Utilisation de gsub() pour supprimer le symbole $
produits$prix <- gsub("\\$", "", produits$prix)
View(produits)
## extraction
write.csv(produits, "prduits")
write.table(produits, file = "produits.csv", sep = ",", row.names = FALSE)
